package com.home.server2executor.service;

import com.home.server2executor.domain.Product;
import com.home.server2executor.domain.Result;
import com.home.server2executor.domain.Task;
import com.home.server2executor.repositories.ProductRepository;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.stereotype.Service;

/**
 * Task processing service.
 */
@Service
public class TaskExecutorService {

    private Logger logger =
            LoggerFactory.getLogger(TaskService.class);

    private ProductRepository productRepository;

    public TaskExecutorService(ProductRepository productRepository) {
        this.productRepository = productRepository;
    }

    /**
     * Create new product from task.
     *
     * @param task task with product to create.
     * @return Result with newly created <code>Product</code>
     * (with autogenerated id) in <code>resultData</code> field.
     */
    private Result createTask(Task task) {
        // Copy constructor used for task.product object
        // to get rid of save() method side effects
        return new Result(task,
                productRepository.save(new Product(task.getProduct())),
                true,
                false);
    }

    /**
     * Get all products.
     *
     * @param task task object will be used
     *             to construct result.
     * @return Result with list of products
     * in <code>resultData</code> field.
     */
    private Result getAll(Task task) {
        return new Result(task, productRepository.findAll(), true, false);
    }

    /**
     * Remove product by id.
     * Fails if id is null.
     *
     * @param task the task with product to remove.
     * @return Result with success/error message
     * in <code>resultData</code> field.
     */
    private Result remove(Task task) {
        if (task.getProduct().getId() == null) {
            return new Result(task,
                    "Product id must not be null",
                    false,
                    true);
        }
        try {
            productRepository.deleteById(task.getProduct().getId());
        } catch (EmptyResultDataAccessException e) {
            return new Result(task,
                    "No Product with id " + task.getProduct().getId(),
                    false,
                    true);
        }
        return new Result(task,
                "Product with id "
                        + task.getProduct().getId()
                        + " is removed successfully",
                true,
                false);
    }

    /**
     * Update product by id.
     * If no product with specified id is exists then
     * new product will be created.
     * Fails if id is null.
     *
     * @param task the task containing product to update.
     * @return Result with updated/created product
     * or error message in <code>resultData</code> field.
     */
    private Result update(Task task) {
        if (task.getProduct().getId() == null) {
            return new Result(task, "Product id is null", false, true);
        }
        return new Result(task,
                productRepository.save(task.getProduct()),
                true,
                false);
    }

    /**
     * Execute task by its type.
     *
     * @param task the task to execute.
     * @return Result object that describing the success of the execution.
     */
    public Result executeTask(Task task) {
        switch (task.getTaskType()) {
            case Create:
                return createTask(task);
            case GetAll:
                return getAll(task);
            case Remove:
                return remove(task);
            case Update:
                return update(task);
            default:
                return new Result(task,
                        "Not recognized task type: " + task.getTaskType(),
                        false,
                        true);
        }
    }
}
