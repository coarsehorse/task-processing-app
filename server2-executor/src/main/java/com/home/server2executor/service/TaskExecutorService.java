package com.home.server2executor.service;

import com.home.server2executor.domain.Product;
import com.home.server2executor.domain.Result;
import com.home.server2executor.domain.Task;
import com.home.server2executor.repositories.ProductRepository;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.stereotype.Service;

/**
 * Task execution service.
 */
@Service
public class TaskExecutorService {

    private ProductRepository productRepository;

    public TaskExecutorService(ProductRepository productRepository) {
        this.productRepository = productRepository;
    }

    /**
     * Create new product from task.
     *
     * @param task task with product to create.
     * @return Result with newly created <code>Product</code>
     * (with autogenerated id) in <code>resultData</code> field.
     */
    private Result createTask(Task task) {
        if (task.getProduct() == null) {
            return new Result(task, "Product must not be null", false, true);
        }
        Product product = task.getProduct();
        if (product.getTitle() == null
                || product.getDescription() == null
                || product.getPrice() == null) {
            return new Result(task,
                    "Product title, description and price must be not null for Create task",
                    false,
                    true);
        }

        // Copy constructor has been used on product object
        // to get rid of save() method side effects
        return new Result(task,
                productRepository.save(new Product(product)),
                true,
                false);
    }

    /**
     * Get all products.
     *
     * @param task task object will be used
     *             to construct result.
     * @return Result with list of products
     * in <code>resultData</code> field.
     */
    private Result getAll(Task task) {
        return new Result(task, productRepository.findAll(), true, false);
    }

    /**
     * Remove product by id.
     * Fails if id is null.
     *
     * @param task the task with product to remove.
     * @return Result with success/error message
     * in <code>resultData</code> field.
     */
    private Result remove(Task task) {
        if (task.getProduct() == null) {
            return new Result(task, "Product must not be null", false, true);
        }
        Product product = task.getProduct();

        if (product.getId() == null) {
            return new Result(task,
                    "Product id must not be null for Remove task",
                    false,
                    true);
        }
        try {
            productRepository.deleteById(product.getId());
        } catch (EmptyResultDataAccessException e) {
            return new Result(task,
                    "No Product with id " + product.getId(),
                    false,
                    true);
        }
        return new Result(task,
                "Product with id " + product.getId() + " removed successfully",
                true,
                false);
    }

    /**
     * Update product by id.
     * If no product with specified id is exists then
     * new product will be created.
     * Fails if id is null.
     *
     * @param task the task containing product to update.
     * @return Result with updated/created product
     * or error message in <code>resultData</code> field.
     */
    private Result update(Task task) {
        if (task.getProduct() == null) {
            return new Result(task, "Product must not be null", false, true);
        }

        Product updProduct = task.getProduct();
        if (updProduct.getId() == null) {
            return new Result(task, "Product id must not be null", false, true);
        }

        final Result r = new Result(task, null, true, false);
        productRepository
                .findById(updProduct.getId())
                .ifPresentOrElse((p) -> {
                    if (updProduct.getTitle() != null) p.setTitle(updProduct.getTitle());
                    if (updProduct.getDescription() != null) p.setDescription(updProduct.getDescription());
                    if (updProduct.getPrice() != null) p.setPrice(updProduct.getPrice());
                    productRepository.save(p);
                    r.setResultData(p);
                }, () -> {
                    r.setSuccessful(false);
                    r.setError(true);
                    r.setResultData("No product with id " + updProduct.getId() + " found");
                });

        return r;
    }

    /**
     * Execute task by its type.
     *
     * @param task the task to execute.
     * @return Result object that describing the success of the execution.
     */
    public Result executeTask(Task task) {
        switch (task.getTaskType()) {
            case Create:
                return createTask(task);
            case GetAll:
                return getAll(task);
            case Remove:
                return remove(task);
            case Update:
                return update(task);
            default:
                return new Result(task,
                        "Not recognized task type: " + task.getTaskType(),
                        false,
                        true);
        }
    }
}
